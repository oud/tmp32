package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GroupeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupeAllPropertiesEquals(Groupe expected, Groupe actual) {
        assertGroupeAutoGeneratedPropertiesEquals(expected, actual);
        assertGroupeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupeAllUpdatablePropertiesEquals(Groupe expected, Groupe actual) {
        assertGroupeUpdatableFieldsEquals(expected, actual);
        assertGroupeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupeAutoGeneratedPropertiesEquals(Groupe expected, Groupe actual) {
        assertThat(actual)
            .as("Verify Groupe auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupeUpdatableFieldsEquals(Groupe expected, Groupe actual) {
        assertThat(actual)
            .as("Verify Groupe relevant properties")
            .satisfies(a -> assertThat(a.getCodeGroupeAssures()).as("check codeGroupeAssures").isEqualTo(expected.getCodeGroupeAssures()))
            .satisfies(a ->
                assertThat(a.getCodeGroupePopulation()).as("check codeGroupePopulation").isEqualTo(expected.getCodeGroupePopulation())
            )
            .satisfies(a -> assertThat(a.getTypeGroupeAssures()).as("check typeGroupeAssures").isEqualTo(expected.getTypeGroupeAssures()))
            .satisfies(a ->
                assertThat(a.getDateDebutPeriodeGroupeAssures())
                    .as("check dateDebutPeriodeGroupeAssures")
                    .isEqualTo(expected.getDateDebutPeriodeGroupeAssures())
            )
            .satisfies(a ->
                assertThat(a.getLibelleGroupeAssuresTypeAutre())
                    .as("check libelleGroupeAssuresTypeAutre")
                    .isEqualTo(expected.getLibelleGroupeAssuresTypeAutre())
            )
            .satisfies(a ->
                assertThat(a.getCodeEtatGroupeAssures()).as("check codeEtatGroupeAssures").isEqualTo(expected.getCodeEtatGroupeAssures())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupeUpdatableRelationshipsEquals(Groupe expected, Groupe actual) {
        assertThat(actual)
            .as("Verify Groupe relationships")
            .satisfies(a -> assertThat(a.getContrat()).as("check contrat").isEqualTo(expected.getContrat()));
    }
}
