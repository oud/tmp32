package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OperationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAllPropertiesEquals(Operation expected, Operation actual) {
        assertOperationAutoGeneratedPropertiesEquals(expected, actual);
        assertOperationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAllUpdatablePropertiesEquals(Operation expected, Operation actual) {
        assertOperationUpdatableFieldsEquals(expected, actual);
        assertOperationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAutoGeneratedPropertiesEquals(Operation expected, Operation actual) {
        assertThat(actual)
            .as("Verify Operation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationUpdatableFieldsEquals(Operation expected, Operation actual) {
        assertThat(actual)
            .as("Verify Operation relevant properties")
            .satisfies(a ->
                assertThat(a.getNumeroOperationNiveau0()).as("check numeroOperationNiveau0").isEqualTo(expected.getNumeroOperationNiveau0())
            )
            .satisfies(a -> assertThat(a.getEtatOperation()).as("check etatOperation").isEqualTo(expected.getEtatOperation()))
            .satisfies(a -> assertThat(a.getDateEffetOperation()).as("check dateEffetOperation").isEqualTo(expected.getDateEffetOperation())
            )
            .satisfies(a ->
                assertThat(a.getDateDemandeOperation()).as("check dateDemandeOperation").isEqualTo(expected.getDateDemandeOperation())
            )
            .satisfies(a -> assertThat(a.getDateCreation()).as("check dateCreation").isEqualTo(expected.getDateCreation()))
            .satisfies(a -> assertThat(a.getCodeActeGestion()).as("check codeActeGestion").isEqualTo(expected.getCodeActeGestion()))
            .satisfies(a ->
                assertThat(a.getNumeroOperationAnnulee()).as("check numeroOperationAnnulee").isEqualTo(expected.getNumeroOperationAnnulee())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationUpdatableRelationshipsEquals(Operation expected, Operation actual) {
        assertThat(actual)
            .as("Verify Operation relationships")
            .satisfies(a -> assertThat(a.getContrat()).as("check contrat").isEqualTo(expected.getContrat()));
    }
}
